import unittest
from parameterized import parameterized
from board import Board


class Test_board(unittest.TestCase):
    
    def setUp(self):
        self.board = Board()

    def test_make_board_original(self):
        new_board = [[' L ', 'KN ', 'SG ', 'GG ', ' K ', 'GG ', 'SG ', 'KN ', ' L ', '   '], 
                     ['   ', ' R ', '   ', '   ', '   ', '   ', '   ', ' B ', '   '], 
                     [' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     [' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P '], 
                     ['   ', ' B ', '   ', '   ', '   ', '   ', '   ', ' R ', '   '], 
                     [' L ', 'KN ', 'SG ', 'GG ', ' K ', 'GG ', 'SG ', 'KN ', ' L ', '   ']]
        self.assertEqual(self.board.make_board(), new_board)

    @parameterized.expand([
        ({" P ": [[1, 1], [2, 1]]}, {},
                    [['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ']] ),
        ({" P ": [[1, 0], [2, 0]]}, {" P ": [[3, 0]]},
                    [['   ', ' P ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ']] ),
        ({" P ": [[1, 8], [2, 8]]}, {},
                    [['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   ', '   ']] ),
        ({" P ": [[1, 8], [2, 8]]}, {" P ": [[3, 8]]},
                    [['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', ' P ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   ']] ),
        ({" P ": [[1, 0]]}, {" P ": [[2, 0], [3, 0]]},
                    [['   ', ' P ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ']] ),
        ({" P ": [[1, 8]]}, {" P ": [[2, 8], [3, 8]]},
                    [['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                     ['   ', ' P ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   ']] ),
    ])
    def test_make_board(self, white, black, new_board):
        board = Board(white, black)
        self.assertEqual(board.make_board(), new_board)

    @parameterized.expand([
        ([0, 6], [0, 5],[[' L ', 'KN ', 'SG ', 'GG ', ' K ', 'GG ', 'SG ', 'KN ', ' L ', '   '], 
                         ['   ', ' R ', '   ', '   ', '   ', '   ', '   ', ' B ', '   '], 
                         [' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         [' P ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P '], 
                         ['   ', ' B ', '   ', '   ', '   ', '   ', '   ', ' R ', '   '], 
                         [' L ', 'KN ', 'SG ', 'GG ', ' K ', 'GG ', 'SG ', 'KN ', ' L ', '   ']]),
        ([8, 6], [8, 5],[[' L ', 'KN ', 'SG ', 'GG ', ' K ', 'GG ', 'SG ', 'KN ', ' L ', '   '], 
                         ['   ', ' R ', '   ', '   ', '   ', '   ', '   ', ' B ', '   '], 
                         [' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', ' P '], 
                         [' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', ' P ', '   '], 
                         ['   ', ' B ', '   ', '   ', '   ', '   ', '   ', ' R ', '   '], 
                         [' L ', 'KN ', 'SG ', 'GG ', ' K ', 'GG ', 'SG ', 'KN ', ' L ', '   ']])
    ])
    def test_play(self, piece_coords, new_coords, new_board):
        self.board.play(piece_coords[0], piece_coords[1])
        self.board.play(new_coords[0], new_coords[1])
        self.assertEqual(self.board.make_board(), new_board)

    @parameterized.expand([
        ([3, 5], [3, 4], {" P ": [[0, 5],[1, 5],[2, 5], [3, 5]]}, {" P ": [[0, 4], [1, 4], [2, 4], [3, 4]]},
                        [['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         [' P ', ' P ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   '], 
                         [' P ', ' P ', ' P ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   '], 
                         ['   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', '   ', ' P ']])
    ])
    def test_capture(self, coords, new_coords, black, white, new_board):
        board = Board(white, black)
        board.play(coords[0], coords[1])
        board.play(new_coords[0], new_coords[1])
        self.assertEqual(board.make_board(), new_board)

    @parameterized.expand([
        ({" P ": [[1, 3]]}, {}, [1, 3], [1, 2], [10, 4], 'PP ', "black"),
        ({" P ": [[1, 2]]}, {}, [1, 2], [1, 1], [10, 4], 'PP ', "black"),
        ({" P ": [[1, 3]]}, {}, [1, 3], [1, 2], [12, 4], ' P ', "black"),
        ({}, {" P ": [[1, 5]]}, [1, 5], [1, 6], [10, 4], 'PP ', "white"),
        ({}, {" P ": [[1, 6]]}, [1, 6], [1, 7], [10, 4], 'PP ', "white"),
        ({}, {" P ": [[1, 5]]}, [1, 5], [1, 6], [12, 4], ' P ', "white"),
        ({"SG ": [[1, 3]]}, {}, [1, 3], [1, 2], [10, 4], "PSG", "black"),
        ({"SG ": [[1, 3]]}, {}, [1, 3], [1, 2], [12, 4], "SG ", "black"),
        ({"SG ": [[1, 2]]}, {}, [1, 2], [1, 1], [10, 4], "PSG", "black"),
        ({"SG ": [[1, 2]]}, {}, [1, 2], [1, 1], [12, 4], "SG ", "black"),
        ({"SG ": [[1, 2]]}, {}, [1, 2], [0, 3], [10, 4], "PSG", "black"),
        ({"SG ": [[1, 2]]}, {}, [1, 2], [0, 3], [12, 4], "SG ", "black"),
        ({}, {"SG ": [[1, 5]]}, [1, 5], [1, 6], [10, 4], "PSG", "white"),
        ({}, {"SG ": [[1, 5]]}, [1, 5], [1, 6], [12, 4], "SG ", "white"),
        ({}, {"SG ": [[1, 6]]}, [1, 6], [1, 7], [10, 4], "PSG", "white"),
        ({}, {"SG ": [[1, 6]]}, [1, 6], [1, 7], [12, 4], "SG ", "white"),
        ({}, {"SG ": [[1, 6]]}, [1, 6], [2, 5], [10, 4], "PSG", "white"),
        ({}, {"SG ": [[1, 6]]}, [1, 6], [2, 5], [12, 4], "SG ", "white"),

        ({"KN ": [[3, 3]]}, {}, [3, 3], [4, 1], [10, 4], "PKN", "black"),
        ({"KN ": [[3, 3]]}, {}, [3, 3], [4, 1], [12, 4], "KN ", "black"),
        ({"KN ": [[3, 2]]}, {}, [3, 2], [4, 0], [10, 4], "PKN", "black"),
        ({"KN ": [[3, 2]]}, {}, [3, 2], [4, 0], [12, 4], "KN ", "black"),
        ({}, {"KN ": [[3, 4]]}, [3, 4], [2, 6], [10, 4], "PKN", "white"),
        ({}, {"KN ": [[3, 4]]}, [3, 4], [2, 6], [12, 4], "KN ", "white"),
        ({}, {"KN ": [[3, 6]]}, [3, 6], [2, 8], [10, 4], "PKN", "white"),
        ({}, {"KN ": [[3, 6]]}, [3, 6], [2, 8], [12, 4], "KN ", "white"),
        ({" L ": [[0, 6]]}, {}, [0, 6], [0, 2], [10, 4], "PL ", "black"),
        ({" L ": [[0, 6]]}, {}, [0, 6], [0, 2], [12, 4], " L ", "black"),
        ({" L ": [[0, 2]]}, {}, [0, 2], [0, 1], [10, 4], "PL ", "black"),
        ({" L ": [[0, 2]]}, {}, [0, 2], [0, 1], [12, 4], " L ", "black"),
        ({}, {" L ": [[8, 3]]}, [8, 3], [8, 6], [10, 4], "PL ", "white"),
        ({}, {" L ": [[8, 3]]}, [8, 3], [8, 6], [12, 4], " L ", "white"),
        ({}, {" L ": [[8, 6]]}, [8, 6], [8, 8], [10, 4], "PL ", "white"),
        ({}, {" L ": [[8, 6]]}, [8, 6], [8, 8], [12, 4], " L ", "white"),
        ({" B ": [[1, 4]]}, {}, [1, 4], [4, 1], [10, 4], "PB ", "black"),
        ({" B ": [[1, 4]]}, {}, [1, 4], [4, 1], [12, 4], " B ", "black"),
        ({" B ": [[6, 2]]}, {}, [6, 2], [7, 1], [10, 4], "PB ", "black"),
        ({" B ": [[6, 2]]}, {}, [6, 2], [7, 1], [12, 4], " B ", "black"),
        ({" B ": [[8, 2]]}, {}, [8, 2], [6, 4], [10, 4], "PB ", "black"),
        ({" B ": [[8, 2]]}, {}, [8, 2], [6, 4], [12, 4], " B ", "black"),
        ({}, {" B ": [[5, 4]]}, [5, 4], [2, 7], [10, 4], "PB ", "white"),
        ({}, {" B ": [[5, 4]]}, [5, 4], [2, 7], [12, 4], " B ", "white"),
        ({}, {" B ": [[3, 7]]}, [3, 7], [1, 5], [10, 4], "PB ", "white"),
        ({}, {" B ": [[3, 7]]}, [3, 7], [1, 5], [12, 4], " B ", "white"),
        ({}, {" B ": [[2, 7]]}, [2, 7], [1, 6], [10, 4], "PB ", "white"),
        ({}, {" B ": [[2, 7]]}, [2, 7], [1, 6], [12, 4], " B ", "white"),
        ({" R ": [[2, 5]]}, {}, [2, 5], [2, 0], [10, 4], "PR ", "black"),
        ({" R ": [[2, 5]]}, {}, [2, 5], [2, 0], [12, 4], " R ", "black"),
        ({" R ": [[2, 0]]}, {}, [2, 0], [2, 1], [10, 4], "PR ", "black"),
        ({" R ": [[2, 0]]}, {}, [2, 0], [2, 1], [12, 4], " R ", "black"),
        ({" R ": [[2, 2]]}, {}, [2, 2], [2, 7], [10, 4], "PR ", "black"),
        ({" R ": [[2, 2]]}, {}, [2, 2], [2, 7], [12, 4], " R ", "black"),
        ({}, {" R ": [[4, 3]]}, [4, 3], [4, 7], [10, 4], "PR ", "white"),
        ({}, {" R ": [[4, 3]]}, [4, 3], [4, 7], [12, 4], " R ", "white"),
        ({}, {" R ": [[4, 7]]}, [4, 7], [4, 5], [10, 4], "PR ", "white"),
        ({}, {" R ": [[4, 7]]}, [4, 7], [4, 5], [12, 4], " R ", "white"),
        ({}, {" R ": [[4, 7]]}, [4, 7], [4, 8], [10, 4], "PR ", "white"),
        ({}, {" R ": [[4, 7]]}, [4, 7], [4, 8], [12, 4], " R ", "white"),
    ])
    def test_play_promote(self, black, white, piece_coords, new_coords, promote, expected, turn):
        board = Board(white, black)
        board.turn = turn
        board.play(piece_coords[0], piece_coords[1])
        board.play(new_coords[0], new_coords[1])
        self.assertEqual(board.turn, turn)
        board.play(promote[0], promote[1])
        self.assertNotEqual(board.turn, turn)
        self.assertEqual(board.make_board()[new_coords[1]][new_coords[0]], expected)

if __name__ == "__main__":
    unittest.main(verbosity=2)